{"version":3,"sources":["webpack:///./routes/settings/style.css","webpack:///./global-access.js","webpack:///./configuration.js","webpack:///./components/mkrow-input/index.js","webpack:///./components/mkrow/index.js","webpack:///./components/alert-modal/index.js","webpack:///./routes/settings/index.js"],"names":["module","exports","axios","require","default","GlobalAccess","getDevices","app","get","Configuration","mdashURL","localStorage","ktok","then","res","devices","pending","Object","keys","data","pubkeys","map","k","url","encodeURIComponent","method","catch","Promise","all","setState","getAllServings","servings","baseURL","provisionURL","appID","callTimeoutMilli","defaultSiteName","drinkSizes","drinkSizes_US","kegSizes","kegSizes_US","MkRowInput","props","stringToString","s","componentDidMount","self","normalize","format","value","componentWillReceiveProps","newProps","handleInput","e","target","onInput","state","render","h","this","type","Component","MkRow","extraProps","valueResolver","newValue","class","label","badge","placeholder","term","onChange","match","k2","replace","AlertModal","closeModal","onClose","modal","open","Modal","role","id","children","onClick","Settings","recursive","object","key","splice","setNestedState","allKeys","split","setKey","obj","val","isNaN","Number","parts","i","length","getKey","handleMkRowChange","bind","mkRowValueResolver","r","d","shadow","reported","c","undefined","config","onAutoKegReset","v","autoKegResetAlertOpen","closeAutoKegResetModal","getDevicePubkeyById","drinkSizeIsCustom","drinkSize","every","sz","String","kegSizeIsCustom","kegSize","mkDropdownRow","options","localizedKegSizes","isDisplayUnitMetric","ev","o","title","litersToML","liters","mLToLiters","mL","ouncesToLiter","oz","toFixed","literToOunces","millilitersToGallons","gallonsToMilliliters","gallons","curry","a","b","fns","reduce","acc","nextFn","displayUnits","getPortConfigs","chipID","ota","toUpperCase","displayUnitIsMetric","localizedDrinkSizes","drinkSizesArray","sort","kegSizesArray","portconfigs","mkportform","ind","dskey","ss","kskey","ks","formatAndNormalizeDrinkSizes","Math","round","formatAndNormalizeKegSizes","push","style","portConfig","icon","confirm","pubkey","port","dateCleaned","dateTapped","desired","setTimeout","portCount","removeUnNecessaryProps","dataToProcess","keysToRemove","forEach","nextKey","console","log","saveConfiguration","siteName","Router","route","name","p","headerName","backlink","constructor","settings","online","disabled"],"mappings":"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","file":"route-settings.chunk.46192.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"settings__1JFwH\",\"portConfig\":\"portConfig__2M7mG\"};","import Configuration from './configuration';\r\nconst axios = require('axios').default;\r\n\r\nexport default class GlobalAccess {\r\n    static getDevices = (app) => {\r\n        axios\r\n            .get(\r\n                Configuration.mdashURL + \"/customer?access_token=\" + localStorage.ktok\r\n            )\r\n            .then(function (res) {\r\n                var devices = {},\r\n                    pubkeys = res.data.pubkeys || {};\r\n                var keys = Object.keys(pubkeys);\r\n                var pending = keys.map(function (k) {\r\n                    var url =\r\n                        Configuration.mdashURL +\r\n                        \"/api/v2/m/device?access_token=\" +\r\n                        encodeURIComponent(k);\r\n                    return axios({\r\n                        method: \"GET\",\r\n                        url: url\r\n                    })\r\n                        .then(function (res) {\r\n                            devices[k] = res.data;\r\n                        })\r\n                        .catch(function () { });\r\n                });\r\n                Promise.all(pending).then(function () {\r\n                    app.setState({\r\n                        devices: devices\r\n                    });\r\n                })\r\n            });\r\n    }\r\n\r\n    static getAllServings = (app) => {\r\n        axios\r\n            .get(\r\n                Configuration.mdashURL + \"/customer?access_token=\" + localStorage.ktok\r\n            )\r\n            .then(function (res) {\r\n                var servings = {}, pubkeys = res.data.pubkeys || {};\r\n\r\n                var keys = Object.keys(pubkeys);\r\n                var pending = keys.map(function (k) {\r\n                    var url = Configuration.mdashURL + \"/api/v2/m/device/data/servings_all?access_token=\" + encodeURIComponent(k);\r\n                    return axios({\r\n                        method: \"GET\",\r\n                        url: url\r\n                    })\r\n                        .then(function (res) {\r\n                            servings[k] = res.data;\r\n                        })\r\n                        .catch(function () { });\r\n                });\r\n                Promise.all(pending).then(function () {\r\n                    app.setState({\r\n                        servings: servings,\r\n                        pubkeys: pubkeys\r\n                    });\r\n                })\r\n            });\r\n    }\r\n}","const Configuration = {\r\n    baseURL: \"http://localhost:8080/\",\r\n    provisionURL: \"http://192.168.4.1\",\r\n    mdashURL: \"https://mdash.net\",\r\n    appID: \"\", // <-- Set this to YOUR_APP_ID\r\n    callTimeoutMilli: 10000, // 10 seconds\r\n    defaultSiteName: \"NewSite\",\r\n    drinkSizes: {\r\n        \"1000\": \"Liter (1000 mL)\",\r\n        \"500\": \"Half Liter (500 mL)\",\r\n        \"651\": \"Bomber (651 mL)\",\r\n        \"568\": \"UK Pint (568 mL)\",\r\n        \"473\": \"US Pint (473 mL)\",\r\n        \"355\": \"US Bottle (355 mL)\",\r\n        \"0\": \"Custom\"\r\n    },\r\n    drinkSizes_US: {\r\n        \"1000\": \"Liter (33.8oz)\",\r\n        \"500\": \"Half Liter (16.9 oz)\",\r\n        \"651\": \"Bomber (22.0 oz)\",\r\n        \"568\": \"UK Pint (19.2 oz)\",\r\n        \"473\": \"US Pint (16 oz)\",\r\n        \"355\": \"US Bottle (12 oz)\",\r\n        \"0\": \"Custom\"\r\n    },\r\n    kegSizes: {\r\n        \"9464\": \"Half Corny (9.5L)\",\r\n        \"18927\": \"Corny (18.9L)\",\r\n        \"19550\": \"1/6 Barrel (19.6L)\",\r\n        \"20000\": \"20L\",\r\n        \"25000\": \"25L\",\r\n        \"29340\": \"1/4 Barrel (29.3L)\",\r\n        \"30000\": \"30L\",\r\n        \"40915\": \"Firkin (40.9L)\",\r\n        \"50000\": \"50L\",\r\n        \"58670\": \"1/2 Barrel (58.7L)\",\r\n        \"0\": \"Custom\"\r\n    },\r\n    kegSizes_US: {\r\n        \"9464\": \"Half Corny (2.5 gal)\",\r\n        \"18927\": \"Corny (5 gal)\",\r\n        \"19550\": \"1/6 Barrel (5.16 gal)\",\r\n        \"20000\": \"20L (5.28 gal)\",\r\n        \"25000\": \"25L (6.6 gal)\",\r\n        \"29340\": \"1/4 Barrel (7.75 gal)\",\r\n        \"30000\": \"30L (7.93 gal)\",\r\n        \"40915\": \"Firkin (10.81 gal)\",\r\n        \"50000\": \"50L (13.21 gal)\",\r\n        \"58670\": \"1/2 Barrel (15.5 gal)\",\r\n        \"0\": \"Custom\"\r\n    }\r\n}\r\n\r\nexport default Configuration;","import { h, Component } from 'preact';\r\nimport style from './style';\r\n\r\nexport default class MkRowInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    stringToString = (s) => {\r\n        return s;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let self = this;\r\n\r\n        self.normalize = self.props.normalize || self.stringToString;\r\n        self.format = self.props.format || self.stringToString;\r\n\r\n        self.setState({\r\n            value: self.normalize(self.props.value)\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps = (newProps) => {\r\n        let self = this;\r\n\r\n        self.normalize = newProps.normalize || self.stringToString;\r\n        self.format = newProps.format || self.stringToString;\r\n\r\n        if (self.props.value !== newProps.value)\r\n            self.setState({\r\n                value: self.normalize(newProps.value)\r\n            });\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        let self = this;\r\n\r\n        self.setState({\r\n            value: e.target.value\r\n        });\r\n\r\n        self.props.onInput(self.format(e.target.value));\r\n    };\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        return h(\r\n            \"input\",\r\n            Object.assign({}, self.props, {\r\n                type: self.props.type || \"text\",\r\n                value: self.state.value,\r\n                onInput: self.handleInput\r\n            })\r\n        );\r\n    }\r\n}","import { h, Component } from 'preact';\r\nimport MkRowInput from '../mkrow-input';\r\nimport style from './style';\r\n\r\nexport default class MkRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let self = this;\r\n\r\n        self.props.extraProps = self.props.extraProps || {};\r\n\r\n        this.setState({\r\n            value: self.props.valueResolver(self.props.k, self.props.extraProps.type)\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps = () => {\r\n        let self = this;\r\n\r\n        self.props.extraProps = self.props.extraProps || {};\r\n        let newValue = self.props.valueResolver(self.props.k, self.props.extraProps.type);\r\n        if (newValue !== self.state.value) {\r\n            self.setState({\r\n                value: newValue\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        return (\r\n            <div class=\"form-group row my-2\">\r\n                <label class=\"col-form-label col-4\">\r\n                    {self.props.label}\r\n                </label>\r\n                <div class={self.props.badge ? \"col-3\" : \"col-8\"}>\r\n                    {h(\r\n                        MkRowInput,\r\n                        Object.assign({}, self.props.extraProps, {\r\n                            value: self.state.value,\r\n                            placeholder: self.props.label,\r\n                            // disabled: !!dis || !r.online,\r\n                            class: \"form-control\",\r\n                            onInput: function (term) {                                \r\n                                // onChange(\"innerData.\" + k, term);\r\n                                self.props.onChange(\"c.\" + self.props.k, term);\r\n                                if (self.props.k.match(/.volSize$/)) {\r\n                                    // If user changes volSize, automatically set volStart\r\n                                    // to the same value. Allow, however, overwriting\r\n                                    // volStart manually.\r\n                                    var k2 = self.props.k.replace(\".volSize\", \".volStart\");\r\n                                    // onChange(\"innerData.\" + k2, term);\r\n                                    self.props.onChange(\"c.\" + k2, term);\r\n                                }\r\n                            }\r\n                        })\r\n                    )}\r\n                </div>\r\n\r\n                {self.props.badge ? <div class=\"col-1 d-flex align-items-center\">{self.props.badge}</div> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { h, Component } from 'preact';\r\nimport style from './style';\r\n\r\nexport default class AlertModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        self.props.onClose();\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        let modal;\r\n\r\n        if (self.props.open) {\r\n            modal = <Modal open=\"true\">\r\n                <div class=\"modal-dialog\" role=\"document\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Alert</h5>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <p class=\"lead\">{self.props.children}</p>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-primary mx-auto btn-lg\" onClick={self.closeModal}>OK</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>;\r\n        } else {\r\n            modal = \"\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {modal}\r\n            </div>\r\n        );\r\n    }\r\n}","import { h, Component } from 'preact';\r\nimport { Router } from 'preact-router';\r\nimport style from './style';\r\nimport Configuration from '../../configuration';\r\nconst axios = require('axios').default;\r\nimport SpinButton from '../../components/spin-button';\r\nimport MkRow from '../../components/mkrow';\r\nimport AlertModal from '../../components/alert-modal';\r\nimport GlobalAccess from '../../global-access';\r\n\r\nexport default class Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let p = self.props;\r\n\r\n        p.app.setState({\r\n            headerName: \"Settings / \" + p.name + \" / \" + p.id + \" / \" + (+self.props.port + 1),\r\n            backlink: \"/sites/\" + p.name\r\n        });\r\n\r\n        if (self.props.app.state.devices) {\r\n            if (Object.keys(self.props.app.state.devices).length === 0 && self.props.app.state.devices.constructor === Object) {\r\n                GlobalAccess.getDevices(self.props.app);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(p, oldprops) {\r\n        let self = this;\r\n\r\n        let pubkey = self.getDevicePubkeyById(p.app, p.id);\r\n        if (!pubkey) return;\r\n        let d = p.app.state.devices[pubkey];\r\n\r\n        self.setState({\r\n            pubkey: pubkey,\r\n            c: {},\r\n            d: d\r\n            // please do not modify this field at all\r\n            // or use it\r\n            // it is used to reflect some fields into\r\n            // others, meaning the fields used to be outside react cycle\r\n            // this ensures it is also inside\r\n            // it should hold all the data and take changes\r\n            // innerData: self.state.innerData || d.shadow.state.reported\r\n        });\r\n    }\r\n\r\n    recursive = (object, keys, value) => {\r\n        let self = this;\r\n\r\n        var key = keys.splice(0, 1)[0];\r\n\r\n        if (typeof object !== \"object\") {\r\n            return value;\r\n        }\r\n\r\n        return Object.assign({}, object, {\r\n            [key]: self.recursive(object[key], keys)\r\n        });\r\n    }\r\n\r\n    setNestedState = (setState, keys, value) => {\r\n        let self = this;\r\n\r\n        let allKeys = keys.split(\".\");\r\n        setState(state => {\r\n            self.recursive(state, allKeys, value);\r\n        });\r\n    }\r\n\r\n    setKey = (obj, key, val) => {\r\n        if (!isNaN(val)) {\r\n            val = Number(val);\r\n        }\r\n\r\n        let parts = key.split(\".\");\r\n        for (let i = 0; i < parts.length; i++) {\r\n            if (i >= parts.length - 1) {\r\n                obj[parts[i]] = val;\r\n            } else {\r\n                if (!obj[parts[i]]) obj[parts[i]] = {};\r\n                obj = obj[parts[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    getKey = (obj, key) => {\r\n        var parts = key.split(\".\");\r\n        for (var i = 0; i < parts.length; i++) {\r\n            if (!(parts[i] in obj)) return undefined;\r\n            obj = obj[parts[i]];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    handleMkRowChange = (key, value) => {\r\n        let self = this;\r\n        let setNestedState = self.setNestedState.bind(null, self.setState.bind(self));\r\n\r\n        setNestedState(key, value);\r\n        self.setKey(self.state, key, value);\r\n    }\r\n\r\n    mkRowValueResolver = (k, type) => {\r\n        let self = this;\r\n\r\n        let r = self.state.d.shadow.state.reported;\r\n\r\n        let value = self.getKey(self.state.c, k);\r\n        if (value === undefined) value = self.getKey(r.config, k);\r\n        value = type === \"date\" ? value.replace(/\\//g, \"-\") : value;\r\n\r\n        return value;\r\n    }\r\n\r\n    onAutoKegReset = (v) => {\r\n        this.setState({\r\n            autoKegResetAlertOpen: v == 1\r\n        });\r\n    }\r\n\r\n    closeAutoKegResetModal = () => {\r\n        this.setState({\r\n            autoKegResetAlertOpen: false\r\n        });\r\n    }\r\n\r\n    closeAutoKegResetModal = () => {\r\n        this.setState({\r\n            autoKegResetAlertOpen: false\r\n        });\r\n    }\r\n\r\n    getDevicePubkeyById = (app, id) => {\r\n        for (var k in app.state.devices) {\r\n            var d = app.state.devices[k];\r\n            if (d.id == id)\r\n                return k;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    drinkSizeIsCustom = (drinkSizes, drinkSize) => {\r\n        return (\r\n            drinkSize == 0 ||\r\n            drinkSizes.every(function (sz) {\r\n                return String(sz.value) !== String(drinkSize);\r\n            })\r\n        );\r\n    }\r\n\r\n    kegSizeIsCustom = (kegSizes, kegSize) => {\r\n        return (\r\n            kegSize == 0 ||\r\n            kegSizes.every(function (sz) {\r\n                return String(sz.value) !== String(kegSize);\r\n            })\r\n        );\r\n    }\r\n\r\n    mkDropdownRow = (label, k, options, onChange) => {\r\n        let self = this;\r\n\r\n        let r = self.state.d.shadow.state.reported;\r\n        let localizedKegSizes = self.isDisplayUnitMetric() ? Configuration.kegSizes : Configuration.kegSizes_US;\r\n        let value = self.getKey(self.state.c, k);\r\n        if (value === undefined) value = self.getKey(r.config, k);\r\n        if (k.match(/volSize$/)) {\r\n            value = Number(value);\r\n            if (!(value in localizedKegSizes)) {\r\n                value = 0;\r\n            }\r\n        } else if (k.match(/drinkSize$/) && !(value in Configuration.drinkSizes)) {\r\n            value = 0;\r\n        }\r\n\r\n        return (\r\n            <div class=\"form-group row my-2\">\r\n                <label class=\"col-form-label col-4\">\r\n                    {label}\r\n                </label>\r\n                <div class=\"col-8\">\r\n                    <select class=\"form-control\"\r\n                        type=\"text\"\r\n                        value={value} onChange={function (ev) {\r\n                            let v = ev.target.value;\r\n                            self.setKey(self.state.c, k, v);\r\n                            if (onChange) onChange(v);\r\n                            self.setState(self.state);\r\n                        }}>\r\n                        {options.map(function (o) {\r\n                            return h(\"option\", {\r\n                                value: o.value\r\n                            }, o.title);\r\n                        })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    litersToML = (liters) => {\r\n        return liters * 1000;\r\n    }\r\n\r\n    mLToLiters = (mL) => {\r\n        return mL / 1000;\r\n    }\r\n\r\n    ouncesToLiter = (oz) => {\r\n        return Number((oz * 0.0295735296875).toFixed(3));\r\n    }\r\n\r\n    literToOunces = (liters) => {\r\n        return Number((liters / 0.0295735296875).toFixed(3));\r\n    }\r\n\r\n    millilitersToGallons = (liters) => {\r\n        return Number(((liters * 0.26417) / 1000).toFixed(3));\r\n    }\r\n\r\n    gallonsToMilliliters = (gallons) => {\r\n        return Number(((gallons / 0.26417) * 1000).toFixed(3));\r\n    }\r\n\r\n    curry = (a, b, c) => {\r\n        let fns = [a, b, c];\r\n        return function (val) {\r\n            return fns.reduce(function (acc, nextFn) {\r\n                return nextFn(acc);\r\n            }, val);\r\n        };\r\n    }\r\n\r\n    curry = (a, b) => {\r\n        let fns = [a, b];\r\n        return function (val) {\r\n            return fns.reduce(function (acc, nextFn) {\r\n                return nextFn(acc);\r\n            }, val);\r\n        };\r\n    }\r\n\r\n    isDisplayUnitMetric = () => {\r\n        let self = this;\r\n\r\n        let r = self.state.d.shadow.state.reported;\r\n        let displayUnitIsMetric =\r\n            (self.state.c.displayUnits !== undefined ?\r\n                self.state.c.displayUnits :\r\n                r.config.displayUnits) !== 0;\r\n\r\n        return displayUnitIsMetric;\r\n    }\r\n\r\n    getPortConfigs = () => {\r\n        let self = this;\r\n\r\n        let r = self.state.d.shadow.state.reported;\r\n        r.config.chipID = ((r.ota || {}).id || \"\").toUpperCase();\r\n        let displayUnitIsMetric = self.isDisplayUnitMetric();\r\n\r\n        let drinkSizes = Configuration.drinkSizes;\r\n        let drinkSizes_US = Configuration.drinkSizes_US;\r\n        let localizedDrinkSizes = displayUnitIsMetric ? drinkSizes : drinkSizes_US;\r\n        let drinkSizesArray = Object.keys(localizedDrinkSizes).map(key => {\r\n            return {\r\n                value: Number(key),\r\n                title: localizedDrinkSizes[key]\r\n            };\r\n        });\r\n\r\n        drinkSizesArray = drinkSizesArray.sort(function (a, b) {\r\n            return +a.value < +b.value ? 1 : -1;\r\n        });\r\n\r\n        let kegSizes = Configuration.kegSizes;\r\n        let kegSizes_US = Configuration.kegSizes_US;\r\n        let localizedKegSizes = displayUnitIsMetric ? kegSizes : kegSizes_US;\r\n        let kegSizesArray = Object.keys(localizedKegSizes).map(key => {\r\n            return {\r\n                value: Number(key),\r\n                title: localizedKegSizes[key]\r\n            };\r\n        });\r\n\r\n        kegSizesArray.sort(function (a, b) {\r\n            return +a.value < +b.value ? 1 : -1;\r\n        });\r\n\r\n        let portconfigs = [];\r\n\r\n        let mkportform = (i) => {\r\n            let ind = \"port\" + i;\r\n\r\n            let dskey = ind + \".drinkSize\";\r\n            let ss = self.getKey(self.state.c, dskey);\r\n            if (ss === undefined) ss = self.getKey(r.config, dskey);\r\n            let isServingSizeCustom = !ss || !drinkSizes[ss];\r\n\r\n            let kskey = ind + \".volSize\";\r\n            let ks = self.getKey(self.state.c, kskey);\r\n            if (ks === undefined) ks = self.getKey(r.config, kskey);\r\n            let isKegSizeCustom = !ks || !kegSizes[ks];\r\n\r\n            // If we select keg size in the dropdown, set vol start too\r\n            let onk = function (v) {\r\n                self.setKey(self.state.c, ind + \".volStart\", v);\r\n                if (v == 0) {\r\n                    self.setKey(self.state.c, ind + \".isKegSizeCustom\", 1);\r\n                } else {\r\n                    self.setKey(self.state.c, ind + \".isKegSizeCustom\", 0);\r\n                }\r\n                self.setState(self.state);\r\n            };\r\n\r\n            let ond = function (v) {\r\n                if (v == 0) {\r\n                    self.setKey(self.state.c, ind + \".isDrinkSizeCustom\", 1);\r\n                } else {\r\n                    self.setKey(self.state.c, ind + \".isDrinkSizeCustom\", 0);\r\n                }\r\n                self.setState(self.state);\r\n            };\r\n\r\n            let formatAndNormalizeDrinkSizes = {\r\n                format: !displayUnitIsMetric ?\r\n                    self.curry(self.litersToML, self.ouncesToLiter, Math.round.bind(Math)) :\r\n                    Math.round.bind(Math),\r\n                normalize: !displayUnitIsMetric ?\r\n                    self.curry(self.mLToLiters, self.literToOunces, Math.round.bind(Math)) :\r\n                    Math.round.bind(Math)\r\n            };\r\n            let formatAndNormalizeKegSizes = {\r\n                format: !displayUnitIsMetric ?\r\n                    self.curry(self.gallonsToMilliliters, Math.round.bind(Math)) :\r\n                    self.curry(self.litersToML, Math.round.bind(Math)),\r\n                normalize: !displayUnitIsMetric ?\r\n                    self.curry(self.millilitersToGallons, Math.round.bind(Math)) :\r\n                    self.curry(self.mLToLiters, Math.round.bind(Math))\r\n            };\r\n\r\n            portconfigs.push(\r\n                <div>\r\n                    <div class={style.portConfig}>\r\n                        <hr />\r\n                        Port {i + 1}\r\n                    </div>\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Name\"\r\n                        key={ind + \".userName\"} k={ind + \".userName\"} />\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Description\"\r\n                        key={ind + \".userDesc\"} k={ind + \".userDesc\"} />\r\n\r\n                    {self.mkDropdownRow(\"Keg Size\", ind + \".volSize\", kegSizesArray, onk)}\r\n\r\n                    {self.kegSizeIsCustom(kegSizesArray, self.getKey(self.state.c, ind + \".volSize\") === undefined ?\r\n                        self.getKey(r.config, ind + \".volSize\") :\r\n                        self.getKey(self.state.c, ind + \".volSize\")) ?\r\n                        <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"\"\r\n                            key={ind + \".volSize\"} k={ind + \".volSize\"} badge={displayUnitIsMetric ? \"L\" : \"gal\"}\r\n                            extraProps={formatAndNormalizeKegSizes} />\r\n                        : null}\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label={\"Keg Volume Start \" + (displayUnitIsMetric ? \"(L)\" : \"(gal)\")}\r\n                        key={ind + \".volStart\"} k={ind + \".volStart\"} extraProps={formatAndNormalizeKegSizes} />\r\n\r\n                    {self.mkDropdownRow(\"Serving Size\", ind + \".drinkSize\", drinkSizesArray, ond)}\r\n\r\n                    {self.drinkSizeIsCustom(drinkSizesArray,\r\n                        self.getKey(self.state.c, ind + \".drinkSize\") === undefined ?\r\n                            self.getKey(r.config, ind + \".drinkSize\") :\r\n                            self.getKey(self.state.c, ind + \".drinkSize\")\r\n                    ) ?\r\n                        <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"\"\r\n                            key={ind + \".drinkSize\"} k={ind + \".drinkSize\"} badge={displayUnitIsMetric ? \"mL\" : \"oz\"}\r\n                            extraProps={formatAndNormalizeDrinkSizes} />\r\n                        : null}\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Cal. Offset %\"\r\n                        key={ind + \".calOffset\"} k={ind + \".calOffset\"} />\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Date Tapped\"\r\n                        key={ind + \".dateTapped\"} k={ind + \".dateTapped\"} extraProps={{ type: \"date\" }} />\r\n\r\n                    <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Date Cleaned\"\r\n                        key={ind + \".dateCleaned\"} k={ind + \".dateCleaned\"} extraProps={{ type: \"date\" }} />\r\n\r\n                    <div class=\"form-group row my-2\">\r\n                        <label class=\"col-form-label col-4\">Volume Reset</label>\r\n                        <div class=\"col-8\">\r\n                            <SpinButton class=\"btn-block btn-warning\" icon=\"fa-minus-square\" title=\"Reset Keg Volume\"\r\n                                onClick={function () {\r\n                                    let ok = confirm(\"Sure to reset this volume?\");\r\n                                    if (ok) {\r\n                                        let url =\r\n                                            Configuration.mdashURL +\r\n                                            \"/api/v2/m/device/rpc/Kegtron.ResetVolume\" +\r\n                                            \"?access_token=\" +\r\n                                            encodeURIComponent(self.state.pubkey);\r\n\r\n                                        return axios({\r\n                                            method: \"POST\",\r\n                                            url: url,\r\n                                            data: {\r\n                                                port: i\r\n                                            }\r\n                                        })\r\n                                            .then(function () {\r\n                                                // Reset dateTapped and dateCleaned\r\n                                                url = url.replace(\"/rpc/Kegtron.ResetVolume\", \"\");\r\n                                                let c = {};\r\n                                                c[\"port\" + i] = {\r\n                                                    dateCleaned: null,\r\n                                                    dateTapped: null\r\n                                                };\r\n                                                let data = {\r\n                                                    shadow: {\r\n                                                        state: {\r\n                                                            desired: {\r\n                                                                config: c\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                };\r\n                                                return axios({\r\n                                                    method: \"POST\",\r\n                                                    url: url,\r\n                                                    data: data\r\n                                                });\r\n                                            })\r\n                                            .catch(function () { })\r\n                                            .then(function () {\r\n                                                setTimeout(t => {\r\n                                                    GlobalAccess.getDevices(self.props.app)\r\n                                                }, 250);\r\n                                            });\r\n                                    }\r\n                                }} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < r.config.portCount; i++) mkportform(i);\r\n\r\n        return portconfigs;\r\n    }\r\n\r\n    removeUnNecessaryProps = (data) => {\r\n        let dataToProcess = Object.assign({}, data);\r\n\r\n        let keysToRemove = [\r\n            \"isKegSizeCustom\",\r\n            \"isDrinkSizeCustom\",\r\n            \"isServingSizeCustom\"\r\n        ];\r\n        Object.keys(dataToProcess).forEach(function (nextKey) {\r\n            keysToRemove.forEach(key => delete dataToProcess[nextKey][key]);\r\n        });\r\n        console.log(dataToProcess);\r\n\r\n        return dataToProcess;\r\n    }\r\n\r\n    saveConfiguration = () => {\r\n        let self = this;\r\n\r\n        let url =\r\n            Configuration.mdashURL +\r\n            \"/api/v2/m/device?access_token=\" +\r\n            encodeURIComponent(self.state.pubkey);\r\n\r\n        let data = {\r\n            shadow: {\r\n                state: {\r\n                    desired: {\r\n                        config: self.removeUnNecessaryProps(self.state.c)\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return axios({\r\n            method: \"POST\",\r\n            url: url,\r\n            data: data\r\n        })\r\n            .then(function (res) {\r\n                // If we've updated site name, refresh UI\r\n                if (self.state.c.siteName) {\r\n                    Router.route(\r\n                        \"/config/\" +\r\n                        self.state.c.siteName +\r\n                        \"/\" +\r\n                        self.props.id +\r\n                        \"/\" +\r\n                        self.props.port\r\n                    );\r\n                    self.props.name = self.state.c.siteName;\r\n                    self.componentDidMount();\r\n                }\r\n                setTimeout(t => {\r\n                    GlobalAccess.getDevices(self.props.app);\r\n                }, 750);\r\n            })\r\n            .catch(function () { });\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        if (!self.state.d) {\r\n            return (\r\n                <div class={style.settings}>\r\n                    <div class=\"h-100 d-flex align-items-center\">\r\n                        <div class=\"text-center w-100 text-muted\">\r\n                            <span class=\"fa fa-refresh fa-spin fa-2x\" />\r\n                            <br />\r\n                            {/* Initialising device... */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            let r = self.state.d.shadow.state.reported;\r\n            let portconfigs = self.getPortConfigs();\r\n\r\n            return (\r\n                <div class={style.settings}>\r\n                    <div class=\"overflow-auto p-2 font-weight-light\">\r\n                        <div class=\"px-2 my-2\">\r\n                            {self.state.d.id}:\r\n                            <b class={r.online ? \"text-success font-weight-bold\" : \"font-weight-bold text-danger\"}>\r\n                                {r.online ? \" online\" : \" offline\"}\r\n                            </b>\r\n                        </div>\r\n\r\n                        <hr />\r\n\r\n                        <form class=\"form px-2\">\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Site Name\" k=\"siteName\" />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver}\r\n                                label=\"Alert Email\" k=\"alertEmail\" />\r\n\r\n                            {self.mkDropdownRow(\"Low Alarm\", \"lowThresholdAlertEna\",\r\n                                [{ value: 0, title: \"Disable\" }, { value: 1, title: \"Enable\" }])}\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver}\r\n                                label=\"Low Threshold %\" k=\"lowThreshold\" />\r\n\r\n                            {self.mkDropdownRow(\"Empty Alarm\", \"emptyThresholdAlertEna\",\r\n                                [{ value: 0, title: \"Disable\" }, { value: 1, title: \"Enable\" }])}\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver}\r\n                                label=\"Empty Threshold %\" k=\"emptyThreshold\" />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Ports\"\r\n                                k=\"portCount\" extraProps={{ disabled: true }} />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Hardware\"\r\n                                k=\"hwRev\" extraProps={{ disabled: true }} />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Firmware\"\r\n                                k=\"fwRev\" extraProps={{ disabled: true }} />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Serial Number\"\r\n                                k=\"chipID\" extraProps={{ disabled: true }} />\r\n\r\n                            <MkRow onChange={self.handleMkRowChange} valueResolver={self.mkRowValueResolver} label=\"Model\"\r\n                                k=\"modelNum\" extraProps={{ disabled: true }} />\r\n\r\n                            {self.mkDropdownRow(\"Display Units\", \"displayUnits\",\r\n                                [{ value: 0, title: \"US Customary\" }, { value: 1, title: \"Metric\" }])}\r\n\r\n                            {self.mkDropdownRow(\"Cleaning Mode\", \"cleanEna\",\r\n                                [{ value: 0, title: \"Disable\" }, { value: 1, title: \"Enable\" }])}\r\n\r\n                            {self.mkDropdownRow(\"Beacon Mode\", \"beaconEna\", [{ value: 0, title: \"Disable\" }, { value: 1, title: \"Enable\" }])}\r\n\r\n                            {self.mkDropdownRow(\"Auto Keg Reset\", \"autoCounterRstEna\",\r\n                                [{ value: 0, title: \"Disable\" }, { value: 1, title: \"Enable\" }], self.onAutoKegReset)}\r\n\r\n                            <AlertModal open={self.state.autoKegResetAlertOpen} onClose={self.closeAutoKegResetModal}>\r\n                                For best Auto Keg Reset performance,\r\n                                ensure Reset Keg Volume is applied when the first keg is tapped.\r\n                                Calibrating your tap is also recommended.\r\n                            </AlertModal>\r\n\r\n                            {portconfigs}\r\n\r\n                            <SpinButton class=\"btn-block btn-primary mt-5\" title=\"Save Configuration\" icon=\"fa-save\"\r\n                                onClick={self.saveConfiguration} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}