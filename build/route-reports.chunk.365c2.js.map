{"version":3,"sources":["webpack:///./routes/reports/style.css","webpack:///./routes/reports/index.js"],"names":["module","exports","Reports","props","getHeader","self","class","style","type","name","value","checked","state","servingsByKegChecked","onChange","servingsByChanged","servingsByTimeChecked","selectedDateOption","dateOptionChanged","start","startDateChanged","end","endDateChanged","disabled","icon","title","onClick","print","exportAsCSV","ev","dateFmt","srcElement","moment","format","add","startOf","subtract","endOf","setState","divContents","document","getElementById","innerHTML","printWindow","window","open","write","close","downloadCSV","csv","filename","csvFile","downloadLink","Blob","createElement","download","href","URL","createObjectURL","display","body","appendChild","click","rows","querySelectorAll","i","length","row","cols","j","push","innerText","join","replace","mlToUnits","val","c","displayUnits","toFixed","mlToUnitsWoUnit","mlToUnits2","getServingsForCSV","table","devices","app","totalServingCount","tableRows","Array","Object","keys","pubkey","pubkeys","deviceId","id","deviceConfig","shadow","reported","config","servings","undefined","portCount","port","userName","servingCount","r","serving","servingDetails","JSON","parse","vol","timestamp","utc","local","unit","border","getServingsByKeg","divs","grandTotalRows","grandTotalServingCount","grandTotalVol","sort","div","userDesc","kegSize","volSize","daysOnTap","dateTapped","fromNow","totalVol","splice","src","height","grandTotalTable","getServingsByTime","componentDidMount","this","headerName","backlink","constructor","GlobalAccess","getAllServings","getDevices","render","Component"],"mappings":"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","file":"route-reports.chunk.365c2.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"reports\":\"reports__24zUv\"};","import { h, Component } from 'preact';\r\nimport SpinButton from '../../components/spin-button';\r\nimport style from './style';\r\nimport GlobalAccess from '../../global-access';\r\nimport moment from 'moment/moment';\r\n\r\nexport default class Reports extends Component {\r\n    constructor(props) {\r\n        let dateFmt = \"YYYY-MM-DD\";\r\n        super(props);\r\n\r\n        this.state = {\r\n            start: moment().format(dateFmt),\r\n            end: moment().format(dateFmt),\r\n            selectedDateOption: \"today\",\r\n            servingsByKegChecked: true,\r\n            servingsByTimeChecked: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n\r\n        self.props.app.setState({\r\n            headerName: \"Reports\",\r\n            backlink: \"\"\r\n        });\r\n\r\n        if (self.props.app.state.servings) {\r\n            if (Object.keys(self.props.app.state.servings).length === 0 && self.props.app.state.servings.constructor === Object)\r\n                GlobalAccess.getAllServings(self.props.app);\r\n        }\r\n\r\n        if (self.props.app.state.devices) {\r\n            if (Object.keys(self.props.app.state.devices).length === 0 && self.props.app.state.devices.constructor === Object)\r\n                GlobalAccess.getDevices(self.props.app);\r\n        }\r\n    }\r\n\r\n    getHeader = () => {\r\n        let self = this;\r\n\r\n        let div = <div>\r\n            <div class=\"col-12 d-flex justify-content-center form-inline\" style=\"flex-wrap: wrap\">\r\n                <div class=\"d-flex form-inline\">\r\n                    <input type=\"radio\" name=\"servings\" value=\"keg\" checked={self.state.servingsByKegChecked} onChange={self.servingsByChanged} />\r\n                    &nbsp;<label class=\"col-form-label\">Servings By Keg</label>\r\n                </div>\r\n                <div class=\"d-flex form-inline\" style=\"margin-left: 3%\">\r\n                    <input type=\"radio\" name=\"servings\" value=\"time\" checked={self.state.servingsByTimeChecked} onChange={self.servingsByChanged} />\r\n                    &nbsp;<label class=\"col-form-label\">Servings By Time</label>\r\n                </div>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div class=\"col-12 d-flex justify-content-center\" style=\"flex-wrap: wrap\">\r\n                <div class=\"col-4 d-flex justify-content-center form-inline\">\r\n                    <label class=\"col-form-label\">\r\n                        Range\r\n                    </label>\r\n\r\n                    <select class=\"form-control\" style=\"margin-left: 2%\" type=\"text\" value={self.state.selectedDateOption} onChange={self.dateOptionChanged}>\r\n                        <option value=\"today\">Today</option>\r\n                        <option value=\"yesterday\">Yesterday</option>\r\n                        <option value=\"weekToDate\">Week to Date</option>\r\n                        <option value=\"lastWeek\">Last Week</option>\r\n                        <option value=\"monthToDate\">Month To Date</option>\r\n                        <option value=\"lastMonth\">Last Month</option>\r\n                        <option value=\"yearToDate\">Year to Date</option>\r\n                        <option value=\"custom\">Custom</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {self.state.selectedDateOption == \"custom\" &&\r\n                    <div class=\"col-4 d-flex justify-content-center form-inline\">\r\n                        <label class=\"col-form-label\">Start</label>\r\n                        <input class=\"form-control\" style=\"margin-left: 2%\" type=\"date\" value={self.state.start} onChange={self.startDateChanged} />\r\n                    </div>}\r\n\r\n                {self.state.selectedDateOption == \"custom\" &&\r\n                    <div class=\"col-4 d-flex justify-content-center form-inline\">\r\n                        <label class=\"col-form-label\">End</label>\r\n                        <input class=\"form-control\" style=\"margin-left: 2%\" type=\"date\" value={self.state.end} onChange={self.endDateChanged} />\r\n                    </div>}\r\n\r\n                {self.state.selectedDateOption != \"custom\" &&\r\n                    <div class=\"col-4 d-flex justify-content-center form-inline\">\r\n                        <label class=\"col-form-label\">Start</label>\r\n                        <input disabled class=\"form-control\" style=\"margin-left: 2%\" type=\"date\" value={self.state.start} onChange={self.startDateChanged} />\r\n                    </div>}\r\n\r\n                {self.state.selectedDateOption != \"custom\" &&\r\n                    <div class=\"col-4 d-flex justify-content-center form-inline\">\r\n                        <label class=\"col-form-label\">End</label>\r\n                        <input disabled class=\"form-control\" style=\"margin-left: 2%\" type=\"date\" value={self.state.end} onChange={self.endDateChanged} />\r\n                    </div>}\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div class=\"col-12 d-flex justify-content-center\" style=\"flex-wrap: wrap\">\r\n                <SpinButton class=\"d-inline-block ml-3 btn-warning font-weight-light\"\r\n                    style=\"background-color: antiquewhite\"\r\n                    icon=\"fa-print\"\r\n                    title=\"Print\"\r\n                    onClick={self.print} />\r\n\r\n                <SpinButton class=\"d-inline-block ml-3 btn-warning font-weight-light\"\r\n                    style=\"background-color: antiquewhite\"\r\n                    icon=\"fa-file-excel-o\"\r\n                    title=\"Export As CSV\"\r\n                    onClick={self.exportAsCSV} />\r\n            </div>\r\n        </div>\r\n\r\n        return div;\r\n    }\r\n\r\n    dateOptionChanged = ev => {\r\n        let dateFmt = \"YYYY-MM-DD\";\r\n        let selectedDateOption = ev.srcElement.value;\r\n        let start;\r\n        let end;\r\n\r\n        if (selectedDateOption == \"today\") {\r\n            start = moment().format(dateFmt);\r\n            end = moment().format(dateFmt);\r\n        } else if (selectedDateOption == \"yesterday\") {\r\n            start = moment().add(-1, \"days\").format(dateFmt);\r\n            end = moment().add(-1, \"days\").format(dateFmt);\r\n        } else if (selectedDateOption == \"weekToDate\") {\r\n            start = moment().startOf('isoWeek').format(dateFmt);\r\n            end = moment().format(dateFmt);\r\n        } else if (selectedDateOption == \"lastWeek\") {\r\n            start = moment().subtract(1, 'weeks').startOf('isoWeek').format(dateFmt);\r\n            end = moment().subtract(1, 'weeks').endOf('isoWeek').format(dateFmt);\r\n        } else if (selectedDateOption == \"monthToDate\") {\r\n            start = moment().startOf('month').format(dateFmt);\r\n            end = moment().format(dateFmt);\r\n        } else if (selectedDateOption == \"lastMonth\") {\r\n            start = moment().subtract(1, \"months\").startOf('month').format(dateFmt);\r\n            end = moment().subtract(1, \"months\").endOf('month').format(dateFmt);\r\n        } else if (selectedDateOption == \"yearToDate\") {\r\n            start = moment().startOf('year').format(dateFmt);\r\n            end = moment().format(dateFmt);\r\n        } else {\r\n            start = \"\";\r\n            end = \"\";\r\n        }\r\n\r\n        this.setState({\r\n            selectedDateOption: selectedDateOption,\r\n            start: start,\r\n            end: end\r\n        });\r\n    }\r\n\r\n    startDateChanged = ev => {\r\n        this.setState({\r\n            start: ev.srcElement.value\r\n        });\r\n    }\r\n\r\n    endDateChanged = ev => {\r\n        this.setState({\r\n            end: ev.srcElement.value\r\n        });\r\n    }\r\n\r\n    servingsByChanged = ev => {\r\n        let self = this;\r\n        self.setState({\r\n            servingsByKegChecked: !self.state.servingsByKegChecked,\r\n            servingsByTimeChecked: !self.state.servingsByTimeChecked\r\n        });\r\n    }\r\n\r\n    print = () => {\r\n        var divContents = document.getElementById(\"nodeToRenderAsPDF\").innerHTML;\r\n        var printWindow = window.open('', '', 'height=400,width=800');\r\n        printWindow.document.write('<html><head><title>Kegtron Serving Report</title>');\r\n        printWindow.document.write('</head><body>');\r\n        printWindow.document.write(divContents);\r\n        printWindow.document.write('</body></html>');\r\n        printWindow.document.close();\r\n        printWindow.print();\r\n    }\r\n\r\n    downloadCSV = (csv, filename) => {\r\n        let csvFile;\r\n        let downloadLink;\r\n\r\n        csvFile = new Blob([csv], { type: \"text/csv\" });            // CSV FILE\r\n        downloadLink = document.createElement(\"a\");                 // Download link\r\n        downloadLink.download = filename;                           // File name\r\n        downloadLink.href = window.URL.createObjectURL(csvFile);    // Create a link to the file\r\n        downloadLink.style.display = \"none\";                        // Make sure that the link is not displayed\r\n        document.body.appendChild(downloadLink);                    // Add the link to DOM\r\n        downloadLink.click();                                       // Download\r\n    }\r\n\r\n    exportAsCSV = () => {\r\n        let div = document.getElementById(\"servingsForCSV\");\r\n        let fileName = \"Kegtron Serving Report.csv\";\r\n\r\n        let csv = [];\r\n        let rows = div.querySelectorAll(\"table tr\");\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            let row = [], cols = rows[i].querySelectorAll(\"td, th\");\r\n\r\n            for (let j = 0; j < cols.length; j++)\r\n                row.push(cols[j].innerText);\r\n\r\n            csv.push(row.join(\",\"));\r\n        }\r\n\r\n        this.downloadCSV(csv.join(\"\\n\").replace(\"Serving Report: \", \"\"), fileName);\r\n    }\r\n\r\n    mlToUnits = (val, c) => {\r\n        if (c) {\r\n            if (c.displayUnits)\r\n                return +val + \" mL\"; // metric\r\n            else\r\n                return (+val * 0.033814).toFixed(1) + \" oz\";\r\n        } else\r\n            return +val + \" mL\"; // metric\r\n    }\r\n\r\n    mlToUnitsWoUnit = (val, c) => {\r\n        if (c) {\r\n            if (c.displayUnits)\r\n                return +val; // metric\r\n            else\r\n                return (+val * 0.033814).toFixed(1);\r\n        } else\r\n            return +val; // metric\r\n    }\r\n\r\n    mlToUnits2 = (val, c) => {\r\n        if (c) {\r\n            if (c.displayUnits)\r\n                return (val / 1000.0).toFixed(2) + \" L\";\r\n            else\r\n                return (val / 3785.41).toFixed(2) + \" gal\";\r\n        } else\r\n            return (val / 1000.0).toFixed(2) + \" L\";\r\n    }\r\n\r\n    getServingsForCSV = () => {\r\n        let self = this;\r\n        let devices = self.props.app.state.devices;\r\n        let totalServingCount = 0;\r\n        let tableRows = new Array();\r\n        let table;\r\n        let c;\r\n\r\n        if (Object.keys(devices).length != 0) {\r\n            for (let pubkey in self.props.app.state.pubkeys) {\r\n                let deviceId = devices[pubkey].id;\r\n                let deviceConfig = devices[pubkey].shadow.state.reported.config;\r\n                c = deviceConfig;\r\n\r\n                let servings = self.props.app.state.servings[pubkey];   // All Servings of device with public id pubkey\r\n\r\n                if (servings != undefined && servings.rows.length > 0) {\r\n                    for (let i = 0; i < deviceConfig.portCount; i++) {\r\n\r\n                        let portName = \"port\" + i;\r\n                        let port = deviceConfig[portName];\r\n                        if (port == undefined) continue;\r\n\r\n                        let userName = port.userName;   //Keg Name                        \r\n\r\n                        let servingCount = 0;\r\n                        for (let r in servings.rows) {\r\n                            let serving = servings.rows[r];\r\n                            let device_id = serving[1];\r\n\r\n                            if (deviceId == device_id) {\r\n                                let servingDetails = JSON.parse(serving[3]);\r\n\r\n                                if (servingDetails.port == i && servingDetails.vol > 0) {\r\n                                    let timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD\");\r\n                                    if (timestamp >= self.state.start && timestamp <= self.state.end) {\r\n                                        let timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD\");\r\n                                        if (timestamp >= self.state.start && timestamp <= self.state.end) {\r\n                                            timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD HH:mm\");\r\n                                            let servingDetails = JSON.parse(serving[3]);\r\n\r\n                                            tableRows.push(<tr><td>{timestamp}</td><td>{userName}</td><td>{self.mlToUnitsWoUnit(servingDetails.vol, deviceConfig)}</td></tr>);\r\n                                        }\r\n\r\n                                        servingCount++;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (servingCount > 0) {\r\n                            totalServingCount += servingCount;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (totalServingCount > 0) {\r\n                let unit = \"mL\";\r\n                if (c) {\r\n                    if (c.displayUnits)\r\n                        unit = \"mL\";\r\n                    else\r\n                        unit = \"oz\";\r\n                }\r\n\r\n                table = <table border=\"1\" style=\"text-align: center; width: 100%\">\r\n                    <tr>\r\n                        <th>Date / Time</th>\r\n                        <th>Keg Name</th>\r\n                        <th>Serving Size ({unit})</th>\r\n                    </tr>\r\n\r\n                    {tableRows}\r\n                </table>;\r\n            } else {\r\n                table = <table border=\"0\"><tr><td>No data available for selected range.</td></tr></table>;\r\n            }\r\n        }\r\n\r\n        return table;\r\n    }\r\n\r\n    getServingsByKeg = () => {\r\n        let self = this;\r\n        let devices = self.props.app.state.devices;\r\n        let divs = new Array();\r\n        let grandTotalRows = new Array();\r\n        let grandTotalServingCount = 0;\r\n        let grandTotalVol = 0;\r\n        let c = undefined;\r\n\r\n        if (Object.keys(devices).length != 0) {\r\n            for (let pubkey in self.props.app.state.pubkeys) {\r\n                let deviceId = devices[pubkey].id;\r\n                let deviceConfig = devices[pubkey].shadow.state.reported.config;\r\n                c = deviceConfig;\r\n\r\n                let servings = self.props.app.state.servings[pubkey];\r\n                if (servings != undefined && servings.rows.length > 0) {\r\n                    servings.rows.sort();\r\n\r\n                    for (let i = 0; i < deviceConfig.portCount; i++) {\r\n                        let tableRows = new Array();\r\n\r\n                        let portName = \"port\" + i;\r\n                        let port = deviceConfig[portName];\r\n                        let div;\r\n                        if (port == undefined) continue;\r\n\r\n                        let userName = port.userName;   //Keg Name\r\n                        let userDesc = port.userDesc;\r\n                        let kegSize = self.mlToUnits2(port.volSize, deviceConfig);\r\n                        let daysOnTap = port.dateTapped ? moment(port.dateTapped || undefined).fromNow().replace(\" ago\", \"\") : \"-\";\r\n\r\n                        div = <table border=\"0\">\r\n                            <tr>\r\n                                <td>Name</td>\r\n                                <td>: <b>{userName}</b></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Description</td>\r\n                                <td>: <b>{userDesc}</b></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Keg Size</td>\r\n                                <td>: <b>{kegSize}</b></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Days On Tap</td>\r\n                                <td>: <b>{daysOnTap}</b></td>\r\n                            </tr>\r\n                        </table>\r\n\r\n                        let servingCount = 0;\r\n                        let totalVol = 0;\r\n                        for (let r in servings.rows) {\r\n                            let serving = servings.rows[r];\r\n                            let device_id = serving[1];\r\n\r\n                            if (deviceId == device_id) {\r\n                                let timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD\");\r\n                                if (timestamp >= self.state.start && timestamp <= self.state.end) {\r\n                                    timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD HH:mm\");\r\n                                    let topic = serving[2];\r\n                                    let servingDetails = JSON.parse(serving[3]);\r\n                                    if (servingDetails.port == i && servingDetails.vol > 0) {\r\n                                        tableRows.push(<tr><td>{timestamp}</td><td>{self.mlToUnits(servingDetails.vol, deviceConfig)}</td></tr>);\r\n                                        totalVol += servingDetails.vol;\r\n                                        servingCount++;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (servingCount > 0) {\r\n                            grandTotalServingCount += servingCount;\r\n                            grandTotalVol += totalVol;\r\n\r\n                            let table = <table border=\"1\" style=\"text-align: center; width: 100%\">\r\n                                <tr>\r\n                                    <th>Date / Time</th>\r\n                                    <th>Serving Size</th>\r\n                                </tr>\r\n\r\n                                {tableRows}\r\n                            </table>\r\n\r\n                            divs.push(<div>{div}</div>);\r\n                            divs.push(<table border=\"0\"><tr><td><br /></td></tr></table>);\r\n                            divs.push(<div>{table}</div>);\r\n                            divs.push(<table border=\"0\"><tr><td><br /></td></tr></table>);\r\n                            divs.push(<table border=\"0\"><tr><td><b>Total Servings: </b>{servingCount}, <b>Total Volume: </b>{self.mlToUnits2(totalVol, deviceConfig)}</td></tr></table>);\r\n                            divs.push(<table border=\"0\"><tr><td><br /><br /></td></tr></table>);\r\n\r\n                            grandTotalRows.push(<tr><td>{userName}</td><td>{servingCount}</td><td>{self.mlToUnits2(totalVol, deviceConfig)}</td></tr>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (grandTotalRows.length > 0) {\r\n                divs.splice(0, 0, <table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td style=\"font-size: x-large\"><b>Serving Report: {self.state.start} - {self.state.end}</b><br /><br /></td></tr></table>);\r\n                divs.splice(0, 0, <table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td><br /><img src=\"/assets/images/KegtronLogoBlack.png\" height=\"24\" /><br /></td></tr></table>);\r\n\r\n                let grandTotalTable = <table border=\"1\" style=\"text-align: center; width: 100%\">\r\n                    <tr>\r\n                        <th>Keg Name</th>\r\n                        <th>Servings</th>\r\n                        <th>Volume Served</th>\r\n                    </tr>\r\n\r\n                    {grandTotalRows}\r\n                </table>\r\n\r\n                divs.push(<table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td style=\"font-size: x-large\"><b>Grand Total</b><br /><br /></td></tr></table>);\r\n                divs.push(<div style=\"text-align: center\">{grandTotalTable}</div>);\r\n                divs.push(<table border=\"0\"><tr><td><br /></td></tr></table>);\r\n                divs.push(<table border=\"0\"><tr><td><b>Total Servings: </b>{grandTotalServingCount}, <b>Total Volume: </b>{self.mlToUnits2(grandTotalVol, c)}</td></tr></table>);\r\n                divs.push(<table border=\"0\"><tr><td><br /><br /></td></tr></table>);\r\n            } else {\r\n                divs = new Array();\r\n                divs.push(<table border=\"0\"><tr><td>No data available for selected range.</td></tr></table>);\r\n            }\r\n        }\r\n\r\n        return divs;\r\n    }\r\n\r\n    getServingsByTime = () => {\r\n        let self = this;\r\n        let devices = self.props.app.state.devices;\r\n        let divs = new Array();\r\n        let grandTotalRows = new Array();\r\n        let grandTotalServingCount = 0;\r\n        let grandTotalVol = 0;\r\n        let tableRows = new Array();\r\n        let c;\r\n\r\n        if (Object.keys(devices).length != 0) {\r\n            for (let pubkey in self.props.app.state.pubkeys) {\r\n                let deviceId = devices[pubkey].id;\r\n                let deviceConfig = devices[pubkey].shadow.state.reported.config;\r\n                c = deviceConfig;\r\n\r\n                let servings = self.props.app.state.servings[pubkey];   // All Servings of device with public id pubkey\r\n\r\n                if (servings != undefined && servings.rows.length > 0) {\r\n                    for (let i = 0; i < deviceConfig.portCount; i++) {\r\n\r\n                        let portName = \"port\" + i;\r\n                        let port = deviceConfig[portName];\r\n                        if (port == undefined) continue;\r\n\r\n                        let userName = port.userName;   //Keg Name                        \r\n\r\n                        let servingCount = 0;\r\n                        let totalVol = 0;\r\n                        for (let r in servings.rows) {\r\n                            let serving = servings.rows[r];\r\n                            let device_id = serving[1];\r\n\r\n                            if (deviceId == device_id) {\r\n                                let servingDetails = JSON.parse(serving[3]);\r\n\r\n                                if (servingDetails.port == i && servingDetails.vol > 0) {\r\n                                    let timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD\");\r\n                                    if (timestamp >= self.state.start && timestamp <= self.state.end) {\r\n                                        let timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD\");\r\n                                        if (timestamp >= self.state.start && timestamp <= self.state.end) {\r\n                                            timestamp = moment.utc(serving[0]).local().format(\"YYYY-MM-DD HH:mm\");\r\n                                            let servingDetails = JSON.parse(serving[3]);\r\n\r\n                                            tableRows.push(<tr><td>{timestamp}</td><td>{userName}</td><td>{self.mlToUnits(servingDetails.vol, deviceConfig)}</td></tr>);\r\n                                        }\r\n\r\n                                        totalVol += servingDetails.vol;\r\n                                        servingCount++;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (servingCount > 0) {\r\n                            grandTotalServingCount += servingCount;\r\n                            grandTotalVol += totalVol;\r\n\r\n                            grandTotalRows.push(<tr><td>{userName}</td><td>{servingCount}</td><td>{self.mlToUnits2(totalVol, deviceConfig)}</td></tr>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (grandTotalRows.length > 0) {\r\n                divs.push(<table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td><br /><img src=\"/assets/images/KegtronLogoBlack.png\" height=\"24\" /><br /></td></tr></table>);\r\n                divs.push(<table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td style=\"font-size: x-large\"><b>Serving Report: {self.state.start} - {self.state.end}</b><br /><br /></td></tr></table>);\r\n\r\n                let table = <table border=\"1\" style=\"text-align: center; width: 100%\">\r\n                    <tr>\r\n                        <th>Date / Time</th>\r\n                        <th>Keg Name</th>\r\n                        <th>Serving Size</th>\r\n                    </tr>\r\n\r\n                    {tableRows}\r\n                </table>;\r\n\r\n                divs.push(table);\r\n\r\n                let grandTotalTable = <table border=\"1\" style=\"text-align: center; width: 100%\">\r\n                    <tr>\r\n                        <th>Keg Name</th>\r\n                        <th>Servings</th>\r\n                        <th>Volume Served</th>\r\n                    </tr>\r\n\r\n                    {grandTotalRows}\r\n                </table>;\r\n\r\n                divs.push(<table border=\"0\"><tr><td><br /><br /></td></tr></table>);\r\n                divs.push(<table border=\"0\" style=\"text-align: center; width: 100%\"><tr><td style=\"font-size: x-large\"><b>Grand Total</b><br /><br /></td></tr></table>);\r\n                divs.push(<div style=\"text-align: center\">{grandTotalTable}</div>);\r\n                divs.push(<table border=\"0\"><tr><td><br /></td></tr></table>);\r\n                divs.push(<table border=\"0\"><tr><td><b>Total Servings: </b>{grandTotalServingCount}, <b>Total Volume: </b>{self.mlToUnits2(grandTotalVol, c)}</td></tr></table>);\r\n                divs.push(<table border=\"0\"><tr><td><br /><br /></td></tr></table>);\r\n            } else {\r\n                divs = new Array();\r\n                divs.push(<table border=\"0\"><tr><td>No data available for selected range.</td></tr></table>);\r\n            }\r\n        }\r\n\r\n        return divs;\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        return (\r\n            <div class=\"overflow-auto p-2\">\r\n                <div class=\"card-deck col-12\">\r\n                    <div class=\"card\">\r\n                        <div class=\"card-header font-weight-bold\">\r\n                            {self.getHeader()}\r\n                        </div>\r\n\r\n                        <div id=\"nodeToRenderAsPDF\" class=\"card-body table-responsive\">\r\n                            {self.state.servingsByKegChecked && self.getServingsByKeg()}\r\n                            {self.state.servingsByTimeChecked && self.getServingsByTime()}\r\n                        </div>\r\n\r\n                        <div id=\"servingsForCSV\" style=\"display: none\">{self.getServingsForCSV()}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}