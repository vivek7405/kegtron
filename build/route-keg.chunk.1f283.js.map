{"version":3,"sources":["webpack:///./routes/keg/style.css","webpack:///./components/graph/index.js","webpack:///./routes/keg/index.js"],"names":["module","exports","Graph","require","props","ref","el","self","setTimeout","clientWidth","setState","width","getRows","data","reverse","map","row","x","timestamp","y","level","vol","getMaxX","rows","max_x","Math","max","apply","moment","add","startOf","getMaxY","getMinX","min_x","min","getGridLabelsPointsArr","xtics","max_y","ytics","W","H","bh","th","grid","labels","i","push","join","length","h","class","t","format","mkx","mky","parseInt","getServings","max_vol","toFixed","state","render","this","duration","asHours","gridLabelsPointsArr","points","path","servings","style","fill","d","stroke","height","stroke-width","Component","axios","default","Keg","componentDidMount","app","devices","Object","keys","constructor","GlobalAccess","getDevices","headerName","name","id","port","backlink","end","start","componentWillReceiveProps","p","pubkey","getDevicePubkeyById","ws","url","Configuration","mdashURL","replace","websocket","onmessage","getServingHistory","componentWillUnmount","close","k","get","then","res","JSON","parse","utc","local","wrapper","shouldReconnect","reconnect","msg","WebSocket","ev","e","console","log","onclose","window","clearTimeout","tid","mlToUnits","val","c","displayUnits","mlToUnits2","getFilteredData","filter","entry","isAfter","isBefore","getEventsTable","r","config","getInfoTable","US","temp","pict","userDesc","online","humidity","modelNum","volSize","volStart","dateCleaned","fromNow","dateTapped","undefined","kegsServed","volDisp","getInfoDiv","left","H2","pc","rx","textAnchor","getGraphToolBar","startFilteringInputValue","String","includes","endFilteringInputValue","type","value","onChange","target","shadow","reported","userName"],"mappings":"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","file":"route-keg.chunk.1f283.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"keg\":\"keg__TxwXi\"};","import { h, Component } from 'preact';\r\nimport style from './style';\r\nimport Configuration from '../../configuration';\r\nimport GlobalAccess from '../../global-access';\r\nconst axios = require('axios').default;\r\nimport moment from 'moment/moment';\r\n\r\nexport default class Graph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: 400\r\n        }\r\n    }\r\n\r\n    ref = (el) => {\r\n        let self = this;\r\n        \r\n        setTimeout(t => {\r\n            if (el && el.clientWidth && el.clientWidth != 0) {\r\n                self.setState({\r\n                    width: el.clientWidth\r\n                });\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    getRows = () => {\r\n        let rows = this.props.data.reverse().map(function (row) {\r\n            return {\r\n                x: row.timestamp,\r\n                y: row.level,\r\n                vol: row.vol\r\n            };\r\n        });\r\n\r\n        return rows;\r\n    }\r\n\r\n    getMaxX = (rows) => {\r\n        let max_x = Math.max.apply(\r\n            null,\r\n            rows.map(function (row) {\r\n                return row.x;\r\n            })\r\n        );\r\n\r\n        if (max_x > 0)\r\n            max_x = moment(max_x).add(1, \"hour\").startOf(\"hour\");\r\n\r\n        return max_x;\r\n    }\r\n\r\n    getMaxY = (rows) => {\r\n        let max_y = Math.max.apply(\r\n            null,\r\n            rows.map(function (row) {\r\n                return row.y || 0;\r\n            })\r\n        );\r\n\r\n        return max_y;\r\n    }\r\n\r\n    getMinX = (rows) => {\r\n        let min_x = Math.min.apply(\r\n            null,\r\n            rows.map(function (row) {\r\n                return row.x;\r\n            })\r\n        );\r\n\r\n        if (min_x > 0)\r\n            min_x = moment(min_x).startOf(\"hour\");\r\n\r\n        return min_x;\r\n    }\r\n\r\n    getGridLabelsPointsArr = (rows, min_x, max_x, xtics, max_y, ytics, W, H, bh, th) => {\r\n        let self = this;\r\n\r\n        let grid = [],\r\n            labels = [],\r\n            points = [];\r\n\r\n        for (let i = 0; i <= ytics; i++) {\r\n            let y = (i * (H - bh - th)) / ytics;\r\n            grid.push([\"M\", 0, y + th].join(\" \"));\r\n            grid.push([\"L\", W, y + th].join(\" \"));\r\n            if (rows.length == 0) continue;\r\n            if (i < ytics)\r\n                labels.push(\r\n                    h(\r\n                        \"text\", {\r\n                        x: 2,\r\n                        y: y + th + 9,\r\n                        class: \"label\"\r\n                    },\r\n                        ((ytics - i) * max_y) / ytics\r\n                    )\r\n                );\r\n        }\r\n\r\n        for (let i = 0; i < xtics; i++) {\r\n            let x = (i * W) / xtics;\r\n            grid.push([\"M\", x, 0].join(\" \"));\r\n            grid.push([\"L\", x, H - bh].join(\" \"));\r\n            if (rows.length == 0) continue;\r\n            let t = moment(min_x + ((max_x - min_x) * i) / xtics);\r\n            labels.push(\r\n                h(\r\n                    \"text\", {\r\n                    x: x + 2,\r\n                    y: H - 12,\r\n                    class: \"label\"\r\n                },\r\n                    t.format(\"YYYY-DD-MM\")\r\n                )\r\n            );\r\n            labels.push(\r\n                h(\"text\", {\r\n                    x: x + 2,\r\n                    y: H - 2,\r\n                    class: \"label\"\r\n                }, t.format(\"hh:mm:ss\"))\r\n            );\r\n        }\r\n\r\n        points = rows.map(function (row, i) {\r\n            return [\"L\", self.mkx(row.x, W, max_x, min_x), self.mky(row.y, H, max_y, bh, th)].join(\" \");\r\n        });\r\n\r\n        let gridLabelsPointsArr = [grid, labels, points];\r\n\r\n        return gridLabelsPointsArr;\r\n    }\r\n\r\n    mkx = function (x, W, max_x, min_x) {\r\n        return parseInt((W * (x - min_x)) / (max_x - min_x) || 0);\r\n    }\r\n\r\n    mky = function (y, H, max_y, bh, th) {\r\n        return parseInt((H - bh - th) * (1 - y / (max_y || 1)) || 0) + th;\r\n    }\r\n\r\n    getServings = (rows, max_x, min_x, W, th) => {\r\n        let self = this;\r\n\r\n        let max_vol = Math.max.apply(null, rows.map(function (row) { return row.vol || 0; }));\r\n\r\n        let servings = rows.map(function (row, i) {\r\n            let x = self.mkx(row.x, W, max_x, min_x);\r\n            let y = ((th * (row.vol || 1)) / (max_vol || 1)).toFixed(0);\r\n            return [\"M\", x, th, \"L\", x, th - y].join(\" \");\r\n        });\r\n\r\n        return servings;\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        let H = 280, ytics = 5, xtics = 5, bh = 25, th = 120, W = self.state.width;\r\n        let rows = self.getRows(), max_x = self.getMaxX(rows), min_x = self.getMinX(rows), max_y = 100; //self.getMaxY(rows);        \r\n\r\n        if (moment.duration(max_x - min_x).asHours() < 2) {\r\n            xtics = 6;\r\n        } else {\r\n            while (moment.duration(max_x - min_x).asHours() % xtics > 0) {\r\n                min_x = min_x.add(-1, \"hour\");\r\n            }\r\n        }\r\n\r\n        let gridLabelsPointsArr = self.getGridLabelsPointsArr(rows, min_x, max_x, xtics, max_y, ytics, W, H, bh, th);\r\n        let grid = gridLabelsPointsArr[0], labels = gridLabelsPointsArr[1], points = gridLabelsPointsArr[2];\r\n        \r\n        let path = rows[0] ? [\"M\", self.mkx(rows[0].x, W, max_x, min_x), self.mky(rows[0].y, H, max_y, bh, th)].join(\" \") : \"M 0 0\";\r\n        let servings = self.getServings(rows, max_x, min_x, W, th);\r\n\r\n        return (\r\n            <div class=\"w-100\" style={\"height: \" + H + \"px\"} ref={self.ref}>\r\n                <svg fill=\"none\" class=\"h-100 w-100\">\r\n                    {h(\r\n                        \"style\", {},\r\n                        \".label {fill: #777; font: italic 10px sans-serif;}\" +\r\n                        \".title {fill: #555; font: bold 14px sans-serif;}\"\r\n                    )}\r\n\r\n                    {labels}\r\n\r\n                    <path d={\"M 0 \" + th + \" L 0 0 L \" + W + \" 0\"} stroke=\"#ccc\" />\r\n                    <rect x=\"0\" y={th} width={W} height={H - th - bh} fill=\"#fafafa\" />\r\n\r\n                    <text x=\"30\" y=\"20\" stroke=\"#aaa\">\r\n                        Serving History\r\n                    </text>\r\n\r\n                    <text x=\"30\" y={th + 20} stroke=\"#aaa\">\r\n                        Volume History\r\n                    </text>\r\n\r\n                    <path d={servings.join(\" \")} stroke=\"blue\" stroke-width=\"7\" />\r\n                    <path d={grid.join(\" \")} stroke=\"#ccc\" stroke-width=\"0.5\" />\r\n                    <path d={path + points.join(\" \")} stroke=\"#3cc\" stroke-width=\"2\" />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}","import { h, Component } from 'preact';\r\nimport Router from 'preact-router';\r\nimport style from './style';\r\nimport Configuration from '../../configuration';\r\nimport GlobalAccess from '../../global-access';\r\nconst axios = require('axios').default;\r\nimport Graph from '../../components/graph';\r\nimport moment from 'moment/moment';\r\n\r\nexport default class Keg extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let self = this;\r\n        let dateFmt = \"YYYY-MM-DD HH:MM\";\r\n\r\n        if (self.props.app.state.devices) {\r\n            if (Object.keys(self.props.app.state.devices).length === 0 && self.props.app.state.devices.constructor === Object) {\r\n                GlobalAccess.getDevices(self.props.app);\r\n            }\r\n        }\r\n\r\n        self.props.app.setState({\r\n            headerName: \"Sites / \" + self.props.name + \" / \" + self.props.id + \" / \" + (+self.props.port + 1),\r\n            backlink: \"/sites/\" + self.props.name\r\n        });\r\n\r\n        self.setState({\r\n            end: \"now\",\r\n            start: moment()\r\n                .add(-5, \"days\")\r\n                .format(dateFmt)\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps = (p) => {\r\n        let self = this;\r\n\r\n        let pubkey = self.getDevicePubkeyById(p.app, p.id);\r\n        if (!pubkey) return;\r\n        if (!self.ws) {\r\n            let url =\r\n                Configuration.mdashURL.replace(/^http/, \"ws\") +\r\n                \"/api/v2/m/device/notify\" +\r\n                \"?access_token=\" +\r\n                pubkey;\r\n            self.ws = self.websocket(url);\r\n            self.ws.onmessage = function (m) {\r\n                GlobalAccess.getDevices(self.props.app);\r\n            };\r\n        }\r\n        let d = p.app.state.devices[pubkey];\r\n        self.setState({\r\n            pubkey: pubkey,\r\n            d: d,\r\n            data: []\r\n        });\r\n        self.getServingHistory(pubkey);\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        let self = this;\r\n        if (self.ws) self.ws.close();\r\n    }\r\n\r\n    getDevicePubkeyById = (app, id) => {\r\n        for (let k in app.state.devices) {\r\n            let d = app.state.devices[k];\r\n            if (d.id == id)\r\n                return k;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getServingHistory = (pubkey) => {\r\n        let self = this;\r\n\r\n        return axios\r\n            .get(\r\n                Configuration.mdashURL +\r\n                \"/api/v2/m/device/data/servings\" +\r\n                \"?access_token=\" +\r\n                pubkey\r\n            )\r\n            .then(function (res) {\r\n                let data = [];\r\n                for (let i = 0; i < res.data.rows.length; i++) {\r\n                    let row = JSON.parse(res.data.rows[i][3]);\r\n                    //let device = res.data.rows[i][1];\r\n                    //console.log(device, props.port, row.port, props.port == row.port);\r\n                    if (row.port != self.props.port) continue;\r\n                    row.timestamp = moment.utc(res.data.rows[i][0]).local();\r\n                    debugger;\r\n                    data.push(row);\r\n                }\r\n                self.setState({\r\n                    data: data\r\n                });\r\n            });\r\n    }\r\n\r\n    websocket = (url) => {\r\n        // let l = window.location, proto = l.protocol.replace('http', 'ws');\r\n        // let wsURI = proto + '//' + l.host + l.pathname + uri;\r\n        let wrapper = {\r\n            shouldReconnect: true,\r\n            close: function () {\r\n                wrapper.shouldReconnect = false;\r\n                wrapper.ws.close();\r\n            }\r\n        };\r\n        let reconnect = function () {\r\n            let msg,\r\n                ws = new WebSocket(url);\r\n            ws.onmessage = function (ev) {\r\n                try {\r\n                    msg = JSON.parse(ev.data);\r\n                } catch (e) {\r\n                    console.log(\"Invalid ws frame:\", ev.data); // eslint-disable-line\r\n                }\r\n                if (msg) wrapper.onmessage(msg);\r\n            };\r\n            ws.onclose = function () {\r\n                window.clearTimeout(wrapper.tid);\r\n                if (wrapper.shouldReconnect) {\r\n                    wrapper.tid = window.setTimeout(reconnect, 1000);\r\n                }\r\n            };\r\n            wrapper.ws = ws;\r\n        };\r\n        reconnect();\r\n        return wrapper;\r\n    }\r\n\r\n    mlToUnits = (val, c) => {\r\n        if (c.displayUnits) {\r\n            return +val + \" mL\"; // metric\r\n        } else {\r\n            return (+val * 0.033814).toFixed(1) + \" oz\";\r\n        }\r\n    }\r\n\r\n    mlToUnits2 = (val, c) => {\r\n        if (c.displayUnits) {\r\n            return (val / 1000.0).toFixed(2) + \" L\";\r\n        } else {\r\n            return (val / 3785.41).toFixed(2) + \" gal\";\r\n        }\r\n    }\r\n\r\n    getFilteredData = () => {\r\n        let self = this;\r\n        \r\n        let start = moment(self.state.start, \"YYYY-MM-DDThh:mm\");\r\n        let end = self.state.end == \"now\" ? moment().local() : self.state.end;\r\n\r\n        let data = (this.state.data || []).filter(entry => {\r\n            return (\r\n                entry.timestamp.isAfter(moment(start)) &&\r\n                entry.timestamp.isBefore(moment(end))\r\n            );\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    getEventsTable = (data, r) => {\r\n        let self = this;\r\n        let c = r.config || {};\r\n\r\n        let eventsTable = <div class=\"table-responsive\" style=\"max-height: 15em\">\r\n            <table class=\"table table-sm table-borderless small text-nowrap\">\r\n                <tr>\r\n                    <th>Timestamp</th>\r\n                    <th>Serving Size</th>\r\n                    <th>Level</th>\r\n                </tr>\r\n\r\n                {data.map(function (row) {\r\n                    return h(\"tr\", {},\r\n                        <td>{row.timestamp.format(\"YYYY-MM-DD HH:mm\")}</td>,\r\n                        <td>{self.mlToUnits(row.vol, c)}</td>,\r\n                        <td>{(row.level || 0).toFixed(1)}%</td>\r\n                    );\r\n                })}\r\n            </table>\r\n        </div>;\r\n\r\n        return eventsTable;\r\n    }\r\n\r\n    getInfoTable = (p, r, data) => {\r\n        let self = this;\r\n\r\n        let c = r.config || {};\r\n        let US = c.displayUnits;\r\n        let temp = !US ? ((c.temp * 9) / 5.0 + 32).toFixed(1) : c.temp.toFixed(1);\r\n        let pict = !US ? \"\\u2109\" : \"\\u2103\";\r\n\r\n        let infoTable = <div class=\"table-responsive\">\r\n            <table class=\"table table-sm table-borderless small\">\r\n                <tr>\r\n                    <td>Description</td>\r\n                    <th class=\"text-right\">\r\n                        {p.userDesc}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Status</td>\r\n                    <th class={\"text-right \" + (r.online ? \"text-success\" : \"text-danger\")}>\r\n                        {r.online ? \"online\" : \"offline\"}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Temperature</td>\r\n                    <th class=\"text-right\">\r\n                        {temp}{pict}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Humidity</td>\r\n                    <th class=\"text-right\">\r\n                        {(c.humidity * 1).toFixed(1)}%\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Model</td>\r\n                    <th class=\"text-right\">\r\n                        {c.modelNum}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Port</td>\r\n                    <th class=\"text-right\">\r\n                        {parseInt(self.props.port) + 1}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Keg Size</td>\r\n                    <th class=\"text-right\">\r\n                        {self.mlToUnits2(p.volSize, c)}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Starting Volume</td>\r\n                    <th class=\"text-right\">\r\n                        {self.mlToUnits2(p.volStart, c)}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Last Cleaned</td>\r\n                    <th class=\"text-right\">\r\n                        {p.dateCleaned ? moment(p.dateCleaned).fromNow() : \"-\"}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Days on Tap</td>\r\n                    <th class=\"text-right\">\r\n                        {p.dateTapped ? moment(p.dateTapped || undefined).fromNow().replace(\" ago\", \"\") : \"-\"}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Kegs Served</td>\r\n                    <th class=\"text-right\">\r\n                        {p.kegsServed || 0}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Volume Served</td>\r\n                    <th class=\"text-right\">\r\n                        {self.mlToUnits2(p.volDisp, c)}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>Last Served</td>\r\n                    <th class=\"text-right\">\r\n                        {data.length == 0 ? \"-\" : self.mlToUnits(data[0].vol, c)}\r\n                    </th>\r\n                </tr>\r\n            </table>\r\n        </div>;\r\n\r\n        return infoTable;\r\n    }\r\n\r\n    getInfoDiv = (p) => {\r\n        let W = 120,\r\n            H = 240,\r\n            left = p.volStart - p.volDisp || 0;\r\n\r\n        if (p.volSize)\r\n            left /= p.volSize;\r\n\r\n        let H2 = (H - 20) * (left < 0 ? 0 : left),\r\n            pc = parseInt((100 * left).toFixed(0));\r\n\r\n        let info = <div class=\"float-left mr-5\" style=\"margin: auto\">\r\n            <svg class=\"mr-2 bg-light\" width={W} height={H}>\r\n                <rect fill=\"#333\" x=\"0\" y=\"0\" width={W} height={H} rx={W / 10} />\r\n                <rect fill=\"#79f\" x=\"10\" y={H - H2 - 10} width={W - 20} height={H2} />\r\n                <text textAnchor=\"middle\" x={pc < 10 ? \"35%\" : pc === 100 ? \"16%\" : \"25%\"} y={H / 2} fill=\"#ff0\" style=\"font-weight: bold; font-size: 200%\">{pc}%</text>\r\n            </svg>\r\n        </div>;\r\n\r\n        return info;\r\n    }\r\n\r\n    getGraphToolBar = () => {\r\n        let self = this;\r\n\r\n        let startFilteringInputValue = String(self.state.start).includes(\"T\") ?\r\n            self.state.start :\r\n            moment(self.state.start).format(\"YYYY-MM-DDThh:mm\");\r\n\r\n        let endFilteringInputValue =\r\n            self.state.end == \"now\" ?\r\n                moment().format(\"YYYY-MM-DDThh:mm\") :\r\n                String(self.state.end).includes(\"T\") ?\r\n                    self.state.end :\r\n                    moment(self.state.end).format(\"YYYY-MM-DDThh:mm\");\r\n\r\n        let graphToolbar = <div class=\"form-inline\">\r\n            <span class=\"mr-5\">Graph</span>\r\n\r\n            <label class=\"mr-2 small\">Start:</label>\r\n            <input class=\"form-control form-control-sm\" type=\"datetime-local\" value={startFilteringInputValue}\r\n                onChange={\r\n                    function (ev) {\r\n                        self.setState({\r\n                            start: ev.target.value\r\n                        })\r\n                    }\r\n                } />\r\n\r\n            <label class=\"mx-2 small\">End:</label>\r\n            <input class=\"form-control form-control-sm\" type=\"datetime-local\" value={endFilteringInputValue}\r\n                onChange={\r\n                    function (ev) {\r\n                        self.setState({\r\n                            end: ev.target.value\r\n                        })\r\n                    }\r\n                } />\r\n        </div>;\r\n\r\n        return graphToolbar;\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n\r\n        let r = (((self.state.d || {}).shadow || {}).state || {}).reported || {};\r\n        let c = r.config || {};\r\n        let p = c[\"port\" + self.props.port] || {};\r\n        let data = self.getFilteredData();\r\n\r\n        return (\r\n            <div class=\"overflow-auto p-2\">\r\n                <div class=\"font-weight-light card-deck\">\r\n                    <div class=\"card my-2\">\r\n                        <div class=\"card-header font-weight-bold\">\r\n                            {\"Port \" + (+self.props.port + 1) + \": \" + (p.userName || \"\")}\r\n                        </div>\r\n                        <div class=\"card-body d-flex\">\r\n                            {self.getInfoDiv(p)}\r\n                            {self.getInfoTable(p, r, data)}\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card my-2\">\r\n                        <div class=\"card-header font-weight-bold\">\r\n                            Serving History\r\n                    </div>\r\n                        <div class=\"card-body\">\r\n                            {self.getEventsTable(data, r)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"font-weight-light card-deck\">\r\n                    <div class=\"card my-2\">\r\n                        <div class=\"card-header font-weight-bold\">\r\n                            {self.getGraphToolBar()}\r\n                        </div>\r\n                        <div class=\"card-body table-responsive\">\r\n                            <Graph data={data} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}